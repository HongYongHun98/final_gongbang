<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="craft">


 <!--==================== 김진솔 시작 ====================== -->
<select id="craft_check_name" parameterType="String" resultType="int">
 	select count(*) from CRAFT where craft_name=#{craft_name}
</select>


<insert id="add_withFile" parameterType="com.spring.gotgongbang.craft.model.CraftVO">
	insert into CRAFT(craft_num_pk, partner_id_fk, craft_name, craft_mobile, craft_representative,
		    craft_Introduce, craft_career, craft_specialty, craft_post_code, craft_address,
		    craft_detail_address, craft_extra_address, craft_latitude, craft_longitude, craft_status,
		    orgFilename, fileName) 
	values(seq_estimate_num_pk.nextval, #{partner_id_fk}, #{craft_name},#{craft_mobile}, #{craft_representative},
			#{craft_Introduce},#{craft_career}, #{craft_specialty}, #{craft_post_code} , #{craft_address} ,
			#{craft_detail_address}, #{craft_extra_address}, 1321.454, 56545.215, default,
			#{orgFilename}, #{fileName})
</insert>



<delete id="del_partner" parameterType="com.spring.gotgongbang.craft.model.PartnerVO">
	 delete from partner
	 where partner_id_pk = #{partner_id_pk}
</delete>

 <!--==================== 김진솔 끝 ====================== -->




<!--==================== 김나윤 시작 ====================== -->
<!-- 수선사 찾기 페이지에서 공방정보 검색하기 -->
<select id="crafts_list_select" resultType="com.spring.gotgongbang.craft.model.CraftVO">
	SELECT *
	FROM CRAFT
</select>


<!-- 수선사 찾기 페이지에서 간략히 수선사 목록 보여주기 -->
<select id="crafts_sum" resultType="com.spring.gotgongbang.craft.model.CraftVO">
	<![CDATA[
	SELECT *
	FROM
	(
	    SELECT *
	    FROM CRAFT
	    WHERE CRAFT_SPECIALTY like '%' || #{craft_specialty, jdbcType=VARCHAR} || '%'
	)
	Where Rownum <= 6
	]]> 
</select>

<!-- 수선사 상세페이지를 보여주기 위해 공방정보 조회해오기 -->
<select id="craft_detail" parameterType="int" resultType="com.spring.gotgongbang.craft.model.CraftVO">
	SELECT *
	FROM CRAFT
	WHERE CRAFT_NUM_PK = #{craft_num_pk, jdbcType=NUMERIC}
</select>


<!-- 수선사 찾기 페이지에서 상단 최근입점공방 정보 알아오기 -->
<select id="craft_new" resultType="com.spring.gotgongbang.craft.model.CraftVO">
	<![CDATA[
	select craft_num_pk, craft_name, craft_introduce, craft_representative
	  from 
	  (
	   select craft_num_pk, craft_name, craft_introduce, craft_representative
	   from craft 
	   where craft_status = 1
	   order by craft_num_pk desc
	  ) V
	  where rownum <= 6
	  ]]>
</select>


<!-- 수선사 찾기 페이지에서 공방정보 검색하기 -->
<select id="wordSearchShow" parameterType="HashMap" resultType="com.spring.gotgongbang.craft.model.CraftVO">

	select craft_name, craft_introduce, craft_representative, craft_num_pk
	from craft
	<choose>
		<when test="searchType eq 'craft_name'">
			where craft_name like '%' || #{searchWord} || '%'
		</when>
		
		<when test="searchType eq 'craft_specialty'">
			where craft_specialty like '%' || #{searchWord} || '%'
		</when>
	</choose>

</select>




<!-- 공방 상세페이지 후기 정보 가져오기 -->
	<resultMap type="HashMap" id="get_review">
    	<result column="whole_img_new_name" property="whole_img_new_name"/>
    	<result column="fixed_photo_num_pk" property="fixed_photo_num_pk"/>
    	<result column="review_id_pk" property="review_id_pk"/>
    	<result column="craft_num_fk" property="craft_num_fk"/>
    	<result column="user_id_fk" property="user_id_fk"/>
    	<result column="review_rating" property="review_rating"/>
    	<result column="order_product_type" property="order_product_type"/>
    	<result column="brand_name" property="brand_name"/>
    	<result column="review_content" property="review_content"/>
    	<result column="review_date" property="review_date"/>
    </resultMap>

<select id="review_select" parameterType="int" resultMap="get_review">
	select final.whole_img_new_name AS whole_img_new_name, 
	final.fixed_photo_num_pk AS fixed_photo_num_pk, 
	final.review_id_pk AS review_id_pk,
	final.craft_num_fk AS craft_num_fk,
	final.user_id_fk AS user_id_fk,
	final.review_rating AS review_rating,
	final.order_product_type AS order_product_type,
	final.brand_name AS brand_name,
	final.review_content AS review_content,
	final.review_date AS review_date
	from
	(
	    SELECT w.whole_img_new_name as whole_img_new_name,
	    f.fixed_photo_num_pk as fixed_photo_num_pk,
	    r.review_id_pk as review_id_pk, 
	    r.craft_num_fk as craft_num_fk,
	    r.user_id_fk as user_id_fk, 
	    r.review_rating as review_rating, 
	    o.order_product_type as order_product_type, 
	    o.brand_name as brand_name,
	    r.review_content as review_content, 
	    r.review_date as review_date  
	    
	    FROM review r
	    INNER JOIN orders o
	    ON r.order_num_fk = o.order_num_pk
	    join whole_img w
	    on w.order_num_fk = r.order_num_fk
	    join fixed_photo f
	    on f.review_id_fk = r.review_id_pk
	    where r.craft_num_fk=#{craft_num_pk}
	) final
	WHERE ROWNUM = 1
</select>


<!-- 공방상세페이지에서 공방 후기 페이징 처리하기 -->
<!-- 리뷰 총 개수 알아오기 -->
<select id="cntReview" resultType="int">
	SELECT COUNT(*) 
	FROM REVIEW
</select>



<!--==================== 김나윤 끝 ====================== -->



<!--==================== 박준엽 시작 ====================== -->
<resultMap type="com.spring.gotgongbang.order.model.OrderVO" id="getAllOrdersMap">
	<result column="order_num_pk" property="order_num_pk"/>
	<result column="user_id_fk" property="user_id_fk"/>
	<result column="order_product_type" property="order_product_type"/>
	<result column="order_date" property="order_date"/>
	<result column="brand_name" property="brand_name"/>
	<result column="requests" property="requests"/>
	<result column="proposal_stat" property="proposal_stat" />
	<collection column="order_num_pk" property="wholeImgList" javaType="java.util.List"
	ofType="com.spring.gotgongbang.order.model.WholeImgVO" select="getWholeImagesByOrderNum"></collection>
	
</resultMap>

<resultMap type="com.spring.gotgongbang.order.model.OrderVO" id="getOrderInfoByOrderNumMap">
	<result column="order_num_pk" property="order_num_pk"/>
	<result column="user_id_fk" property="user_id_fk"/>
	<result column="orderer" property="orderer"/>
	<result column="order_product_type" property="order_product_type"/>
	<result column="order_date" property="order_date"/>
	<result column="brand_name" property="brand_name"/>
	<result column="requests" property="requests"/>
	<collection column="order_num_pk" property="wholeImgList" javaType="java.util.List" ofType="com.spring.gotgongbang.order.model.WholeImgVO" select="getWholeImagesByOrderNum"></collection>
	<collection column="order_num_pk" property="detailImgList" javaType="java.util.List" ofType="com.spring.gotgongbang.order.model.DetailImgVO" select="getDetailImagesByOrderNum"></collection>
</resultMap>

<resultMap type="HashMap" id="getRepariListBycraftNumMap">
	<result column="brand_name" property="brand_name" />
	<result column="request_explain" property="request_explain" />
	<result column="requests" property="requests" />
	<result column="orderer" property="orderer" />
	<result column="order_product_type" property="order_product_type" />
	<result column="order_num_fk" property="order_num_fk" />
	<result column="order_num_pk" property="order_num_pk" />
	<result column="order_detail_id_pk" property="order_detail_id_pk" />
	<result column="payment_date" property="payment_date" />
	<result column="order_post_code" property="order_post_code" />
	<result column="order_address" property="order_address" />
	<result column="order_detail_address" property="order_detail_address" />
	<result column="order_extra_address" property="order_extra_address" />
	<result column="order_address" property="order_address" />
	<result column="product_status" property="product_status" />
	<result column="payment" property="payment" />
	<collection column="order_num_pk" property="wholeImgList" javaType="java.util.List" ofType="com.spring.gotgongbang.order.model.WholeImgVO" select="getWholeImagesByOrderNum"></collection>
</resultMap>


<select id="getPartnerInfoByUserId" parameterType="String" resultType="com.spring.gotgongbang.craft.model.PartnerVO">
	select  partner_id_pk, partner_pwd, partner_name, partner_email, partner_mobile, partner_post_code, partner_address, partner_detail_address, partner_extra_address, to_char(partner_birthday, 'YYYY-MM-DD') AS partner_birthday
	from PARTNER
	where partner_id_pk = #{userid}
</select>

<update id="updatePartnerInfo" parameterType="com.spring.gotgongbang.craft.model.PartnerVO">
	UPDATE PARTNER SET partner_name = #{partner_name}, partner_email = #{partner_email}, partner_mobile = #{partner_mobile}, partner_post_code = #{partner_post_code}, partner_address = #{partner_address},
	partner_detail_address = #{partner_detail_address}, partner_extra_address = #{partner_extra_address}, partner_birthday = to_date(#{partner_birthday}, 'YYYY-MM-DD')
	WHERE partner_id_pk = #{partner_id_pk}
</update>

<update id="updatePartnerPwd" parameterType="com.spring.gotgongbang.craft.model.PartnerVO">
	UPDATE PARTNER SET partner_pwd = #{partner_pwd}
	WHERE partner_id_pk = #{partner_id_pk}
</update>

<select id="getAllOrders" parameterType="HashMap" resultMap="getAllOrdersMap">
	select order_num_pk, user_id_fk, order_date, brand_name, requests, order_product_type,
	(select count(*) 
	from estimate 
	where order_num_fk = S.order_num_pk and craft_num_fk = #{craftNum}) as proposal_stat
	from
	(
		select row_number() over(order by order_num_pk desc) as rno, 
		order_num_pk, user_id_fk, to_char(order_date, 'yyyy-mm-dd') as order_date,
		brand_name, requests, order_product_type
		from orders
	) S
	where rno between #{startRno} and #{endRno}
</select>

<select id="getWholeImagesByOrderNum" parameterType="int" resultType="com.spring.gotgongbang.order.model.WholeImgVO">
	select whole_img_num_pk, order_num_fk, whole_img_name, whole_img_new_name
	from whole_img
	where order_num_fk = #{order_num_pk}
</select>

<select id="getTotalCountForEstimate" resultType="int">
	select count(*)
	from ORDERS
</select>

<select id="getDetailImagesByOrderNum" parameterType="int" resultType="com.spring.gotgongbang.order.model.DetailImgVO">
	select detail_img_num_pk, order_num_fk, detail_img_name, detail_img_new_name 
	from DETAIL_IMG
	where order_num_fk = #{order_num_pk}
</select>

<select id="getOrderInfoByOrderNum" parameterType="int" resultMap="getOrderInfoByOrderNumMap">
	select order_num_pk, user_id_fk, orderer, order_product_type, to_char(order_date, 'yyyy-mm-dd') as order_date, brand_name, request_explain, requests
	from ORDERS
	where order_num_pk = #{orderNum}
</select>

<select id="getCraftNumByPartnerId" parameterType="String" resultType="String">
	select craft_num_pk
	from CRAFT
	where partner_id_fk = #{partnerId}
</select>

<insert id="insertEstimate" parameterType="HashMap">
	insert into ESTIMATE(estimate_num_pk, order_num_fk, craft_num_fk, estimate_price, estimate_period, order_status, estimate_proposal_date)
	values(seq_estimate_num_pk.nextval, TO_NUMBER(#{order_num_fk}), TO_NUMBER(#{craft_num_fk}), TO_NUMBER(#{estimate_price}), TO_NUMBER(#{estimate_period}), default, sysdate)
</insert>

<select id="checkEstimateExists" parameterType="HashMap" resultType="int">
	select count(*) from estimate where order_num_fk = #{order_num_fk} and craft_num_fk = #{craft_num_fk}
</select>

<select id="getRepariListBycraftNum" parameterType="HashMap" resultMap="getRepariListBycraftNumMap">
select brand_name, request_explain, requests, orderer, order_product_type, order_num_pk, order_num_fk, order_detail_id_pk, payment_date, order_post_code, order_address, order_detail_address, order_extra_address, product_status, payment
from ( 
    select row_number() over(order by payment_date desc) as rno, order_num_pk, brand_name, request_explain, requests, orderer, order_product_type, order_num_fk, order_detail_id_pk, payment_date, order_post_code, order_address, order_detail_address, order_extra_address, product_status, payment
    from 
    ORDERS A
    join
    (
        select order_num_fk, order_detail_id_pk, payment_date, order_post_code, order_address, order_detail_address, order_extra_address, product_status, payment
        from
        (select * from ESTIMATE where craft_num_fk = #{craftNum} and order_status = 1) E
        join
        ORDER_DETAIL O
        on E.estimate_num_pk = O.estimate_num_fk
    ) B
    on A.order_num_pk = B.order_num_fk
) S
where rno between #{startRno} and #{endRno}
</select>

<select id="getTotalCountForRepairList" resultType="int">
	select count(*)
    from
    (select * from ESTIMATE where craft_num_fk = #{craftNum} and order_status = 1) E
    join
    ORDER_DETAIL O
    on E.estimate_num_pk = O.estimate_num_fk
</select>

<update id="updateStateByOrderNum" parameterType="HashMap">
	UPDATE ORDER_DETAIL set product_status = #{state} where order_detail_id_pk = #{orderNum} 
</update>


<!--==================== 박준엽 끝 ====================== -->






    <!--==================== 이지현 시작 ====================== -->
    <select id="delete_partner_end" parameterType="HashMap" resultType="int">
    	select count(*)
		from partner
		where partner_id_pk=#{partner_id_pk} and partner_pwd =#{partner_pwd}
    </select>

			 
    <update id="delete_partner_info" parameterType="String" >
    	update partner
		set partner_status=0 where partner_id_pk = #{partner_id_pk}
    </update>
    

    
    <!--==================== 이지현 끝 ====================== -->

</mapper>