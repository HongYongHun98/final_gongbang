<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">
	<!--==================== 홍용훈 시작 ====================== -->
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="com.spring.gotgongbang.member.model.MemberVO">
		insert into MEMBER (user_id_pk, name, pwd, email, mobile, post_code, address, detail_address, extra_address, gender, birthday, mileage, registerday, last_pwd_change, idle, pwd_change_required, status, gradelevel)
		values(#{user_id_pk},#{name},#{pwd},#{email},#{mobile},#{post_code},#{address},#{detail_address},#{extra_address},#{gender},#{birthday},default,default,default,default,default,default,default)
	</insert>
	
	
	<!-- 이메일 중복 체크 -->
	<select id="isEmailDuplicate" resultType="int">
        SELECT COUNT(*) FROM MEMBER WHERE email = #{email}
    </select>
	
	
	<!-- 아이디 중복 체크 (member 에서)-->
	<select id="isIdDuplicateMember" resultType="int">
		SELECT COUNT(*) FROM MEMBER WHERE user_id_pk = #{user_id_pk}        
    </select>
    
    <!-- 아이디 중복 체크 (partner 에서)-->
	<select id="isIdDuplicatePartner" resultType="int">
		SELECT COUNT(*) FROM PARTNER WHERE partner_id_pk = #{user_id_pk}        
    </select>

    
    <!-- 로그인 처리 -->
    <select id="getLoginMember" parameterType="HashMap" resultType="com.spring.gotgongbang.member.model.MemberVO">
    	select user_id_pk, name, email, mobile, post_code, address, detail_address, extra_address, gender,
		    birthday, mileage, registerday, idle, gradelevel,
		    pwdchangegap,
		    NVL(lastlogingap, trunc( months_between(sysdate, registerday) ) ) AS lastlogingap
		from 
		( 
		select user_id_pk, name, email, mobile, post_code, address, detail_address, extra_address, gender 
		     , birthday
		     , mileage, to_char(registerday, 'yy/mm/dd') AS registerday, idle, gradelevel
		     , trunc( months_between(sysdate, last_pwd_change) ) AS pwdchangegap 
		 from MEMBER 
		 where status = 1 and user_id_pk = #{userid} and pwd = #{pwd} 
		 ) M 
		 CROSS JOIN 
		 ( 
		 select trunc( months_between(sysdate, max(login_date)) ) AS lastlogingap 
		 from LOGIN_HISTORY 
		 where user_id_pk_pk = #{userid} 
		 ) H
    </select>
    
   <!--  MEMBER 테이블의 idle 컬럼의 값을 1로 변경  -->
    <update id="updateIdle" parameterType="String">
		update MEMBER set idle = 1
		where user_id_pk = #{userid}
	</update>
	
	<!-- 로그인 기록 -->
	<insert id="recordLoginDate" parameterType="HashMap">
        insert into LOGIN_HISTORY (user_id_pk_pk, grade, login_date)
        values (#{userid}, #{grade}, default)
    </insert>
    
    <!-- 이름과 이메일 값으로 아이디 유무 체크 및 ID 값 가져오기 -->
    <select id="compareNameEmail" parameterType="HashMap" resultType="com.spring.gotgongbang.member.model.MemberVO">
    	SELECT COALESCE(m.user_id_pk, p.partner_id_pk) AS user_id_pk
		FROM member m
		FULL OUTER JOIN partner p ON m.name = p.partner_name
		WHERE #{name} IN (m.name, p.partner_name) and #{email} IN (m.email, p.partner_email)
    </select>
    
    <!-- 아이디 찾기 -->
    <select id="compareNameEmailMember" parameterType="HashMap" resultType="String">
    	SELECT user_id_pk
		FROM member
		WHERE name = #{name} and email = #{email}
    </select>
    
    <!-- 아이디 찾기 -->
    <select id="compareNameEmailpartner" parameterType="HashMap" resultType="String">
    	SELECT partner_id_pk AS user_id_pk
		FROM partner
		WHERE partner_name = #{name} and partner_email = #{email}
    </select>
    
    <!-- 공방회원가입 -->
	<insert id="insertPartner" parameterType="com.spring.gotgongbang.craft.model.PartnerVO">
		insert into PARTNER (partner_id_pk, partner_name, partner_pwd, partner_email, partner_mobile, partner_post_code, partner_address, partner_detail_address, partner_extra_address, partner_gender, partner_birthday, partner_registerday, partner_lastPwdChange, partner_idle, partner_pwd_change_required, partner_status, partner_gradelevel)
		values(#{partner_id_pk},#{partner_name},#{partner_pwd},#{partner_email},#{partner_mobile},#{partner_post_code},#{partner_address},#{partner_detail_address},#{partner_extra_address},#{partner_gender},#{partner_birthday},default,default,default,default,default,default)
	</insert>
	
	
	<!-- 이메일 중복 체크 공방회원 -->
	<select id="isEmailDuplicate_partner" resultType="int">
        SELECT COUNT(*) FROM PARTNER WHERE partner_email = #{partner_email}
    </select>
    
    
    <!-- 로그인 처리 ( 공방 )-->
    <select id="getLoginPartner" parameterType="HashMap" resultType="com.spring.gotgongbang.craft.model.PartnerVO">
    	select partner_id_pk, partner_name, partner_email, partner_mobile, partner_post_code, partner_address, partner_detail_address, partner_extra_address, partner_gender,
		    partner_birthday, partner_registerday, partner_idle, partner_gradelevel,
		    pwdchangegap,
		    NVL(lastlogingap, trunc( months_between(sysdate, partner_registerday) ) ) AS lastlogingap
		from 
		( 
		select partner_id_pk, partner_name, partner_email, partner_mobile, partner_post_code, partner_address, partner_detail_address, partner_extra_address, partner_gender 
		     , partner_birthday
		     , to_char(partner_registerday, 'yy/mm/dd') AS partner_registerday, partner_idle, partner_gradelevel
		     , trunc( months_between(sysdate, partner_lastPwdChange) ) AS pwdchangegap 
		 from PARTNER 
		 where partner_status = 1 and partner_id_pk = #{userid} and partner_pwd = #{pwd} 
		 ) M 
		 CROSS JOIN 
		 ( 
		 select trunc( months_between(sysdate, max(login_date)) ) AS lastlogingap 
		 from LOGIN_HISTORY 
		 where user_id_pk_pk = #{userid} 
		 ) H
    </select>
    
    
    <!--  MEMBER 테이블의 idle 컬럼의 값을 1로 변경  -->
    <update id="updateIdlePartner" parameterType="String">
		update PARTNER set partner_idle = 1
		where partner_id_pk = #{userid}
	</update>
	
	
	<!-- id과 email 값으로 아이디 유무 체크 및 ID 값 가져오기 ( 비밀번호 찾기 ) -->
    <select id="confirmThroughMemberIdEmail" parameterType="HashMap" resultType="String">
    	SELECT user_id_pk
		FROM member
		WHERE user_id_pk = #{id} and email = #{email}
    </select>
    
    <!-- id과 email 값으로 아이디 유무 체크 및 ID 값 가져오기 ( 비밀번호 찾기 ) -->
    <select id="confirmThroughPartnerIdEmail" parameterType="HashMap" resultType="String">
    	SELECT partner_id_pk AS user_id_pk
		FROM partner
		WHERE partner_id_pk = #{id} and partner_email = #{email}
    </select>
    
    
    <update id="changeMemberPwd" parameterType="com.spring.gotgongbang.member.model.MemberVO">
    	UPDATE MEMBER SET pwd = #{pwd}, last_pwd_change = sysdate
		WHERE user_id_pk = #{id}
    </update>
    
    
    
    <update id="changePartnerPwd" parameterType="com.spring.gotgongbang.craft.model.PartnerVO">
    	UPDATE PARTNER SET partner_pwd = #{pwd}, partner_lastPwdChange = sysdate
		WHERE partner_id_pk = #{id}
    </update>
    
    
    
    <!--==================== 홍용훈 끝 ====================== -->
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    <!--==================== 박준엽 시작 ====================== -->
    <resultMap type="HashMap" id="getProposalListByUserIdMap">
    	<result column="order_num_pk" property="order_num_pk"/>
    	<result column="order_status" property="order_status"/>
    	<result column="order_product_type" property="order_product_type"/>
    	<result column="brand_name" property="brand_name"/>
    	<result column="request_explain" property="request_explain"/>
    	<result column="requests" property="requests"/>
    	<result column="craft_num_fk" property="craft_num_fk"/>
    	<result column="craft_name" property="craft_name"/>
    	<result column="estimate_num_pk" property="estimate_num_pk"/>
    	<result column="estimate_price" property="estimate_price"/>
    	<result column="estimate_period" property="estimate_period"/>
    	<result column="estimate_proposal_date" property="estimate_proposal_date"/>
    </resultMap>
    
    <resultMap type="HashMap" id="getOrderListByUserIdMap">
    	<result column="order_detail_id_pk" property="order_detail_id_pk" />
    	<result column="payment_date" property="payment_date" />
    	<result column="craft_name" property="craft_name" />
    	<result column="craft_mobile" property="craft_mobile" />
    	<result column="estimate_price" property="estimate_price" />
    	<result column="product_status" property="product_status" />
    	<result column="review_cnt" property="review_cnt" />
    </resultMap>
    
    <resultMap type="HashMap" id="orderNumAndCraftNumMap">
    	<result column="order_num_fk" property="orderNum" />
    	<result column="craft_num_fk" property="craftNum" />
    </resultMap>
    
    <select id="getProposalListByUserId" parameterType="HashMap" resultMap="getProposalListByUserIdMap">
    	select order_num_pk, order_status, order_product_type, brand_name, request_explain, requests, craft_num_fk, 
    	order_num_fk, craft_name, estimate_num_pk, estimate_price, estimate_period, to_char(estimate_proposal_date, 'yyyy-mm-dd') as estimate_proposal_date
		from
		(
		    select row_number() over(order by estimate_proposal_date desc) as rno, order_num_pk, order_product_type, brand_name, request_explain, requests, craft_num_fk, 
		    order_num_fk, order_status, (select craft_name from CRAFT where craft_num_pk = B.craft_num_fk) as craft_name, estimate_num_pk,
		    estimate_price, estimate_period, estimate_proposal_date
		    from
		    (
		    select order_num_pk, order_product_type, brand_name, request_explain, requests
		    from ORDERS
		    where user_id_fk = #{userId}
		    ) A
		    join
		    (
		    select estimate_num_pk, craft_num_fk, order_num_fk, order_status, estimate_price, estimate_period, estimate_proposal_date
		    from ESTIMATE
		    ) B
		    on order_num_pk = order_num_fk
		) S
		where rno between #{startRno} and #{endRno}
    </select>
    
    <select id="getUserInfoByUserId" parameterType="String" resultType="com.spring.gotgongbang.member.model.MemberVO">
    	select  user_id_pk, pwd, name, email, mobile, post_code, address, detail_address, extra_address, to_char(birthday, 'YYYY-MM-DD') AS birthday
		from MEMBER
		where user_id_pk = #{userid}
    </select>
    
    <update id="updateMemberInfoByMVO" parameterType="com.spring.gotgongbang.member.model.MemberVO">
    	UPDATE MEMBER SET name = #{name}, email = #{email}, mobile = #{mobile}, post_code = #{post_code}, address = #{address},
		detail_address = #{detail_address}, extra_address = #{extra_address}, birthday = to_date(#{birthday}, 'YYYY-MM-DD')
		WHERE user_id_pk = #{user_id_pk}
    </update>
  
    <update id="updateMemberPwd" parameterType="com.spring.gotgongbang.member.model.MemberVO">
    	UPDATE MEMBER SET pwd = #{pwd}, last_pwd_change = sysdate
		WHERE user_id_pk = #{user_id_pk}
    </update>
    
    <select id="getOrderListByUserId" parameterType="HashMap" resultMap="getOrderListByUserIdMap">
		select order_detail_id_pk, payment_date, craft_name, craft_mobile, estimate_price, product_status
		, (select count(*) from review where order_detail_id_pk = order_detail_id_fk) as review_cnt
		from 
		(
		    select row_number() over(order by payment_date desc) as rno, order_detail_id_pk, to_char(payment_date, 'yyyy-mm-dd') as payment_date, craft_name, craft_mobile, estimate_price, product_status
		    from
		    ORDER_DETAIL
		    join
		    ESTIMATE
		    on estimate_num_fk = estimate_num_pk
		    join
		    CRAFT
		    on craft_num_fk = craft_num_pk
		    join
		    orders
		    on order_num_fk = order_num_pk
		    where user_id_fk = #{userId}
		)
		where rno between #{startRno} and #{endRno}
    </select>
    
    <select id="getTotalCountForOrderListByUserId" parameterType="String" resultType="int">
    	select count(order_detail_id_pk)
		from
		ORDER_DETAIL
		join
		ESTIMATE
		on estimate_num_fk = estimate_num_pk
		join
		CRAFT
		on craft_num_fk = craft_num_pk
		join
		orders
		on order_num_fk = order_num_pk
		where user_id_fk = #{userId}
    </select>
    
    <select id="getTotalCountProposalListByUserId" parameterType="String" resultType="int">
    		select count(order_num_pk)
		    from
		    (
		    select order_num_pk, order_product_type, brand_name, request_explain, requests
		    from ORDERS
		    where user_id_fk = #{userId}
		    ) A
		    join
		    (
		    select estimate_num_pk, craft_num_fk, order_num_fk, estimate_price, estimate_period, estimate_proposal_date
		    from ESTIMATE
		    ) B
		    on order_num_pk = order_num_fk
    
    </select>
    
    <select id="getReviewCntByOrderNum" parameterType="String" resultType="int">
    	select count(*)
    	from REVIEW
    	where order_detail_id_fk = #{orderNum}
    </select>
    
    <select id="getWholeImgListByOrderDetailNum" parameterType="String" resultType="com.spring.gotgongbang.order.model.WholeImgVO">
    	select whole_img_num_pk, order_num_fk, whole_img_name, whole_img_new_name
		from whole_img
		where order_num_fk = 
		(
			select order_num_fk
			from
			estimate
			where estimate_num_pk = 
			    (
			    select estimate_num_fk
			    from order_detail
			    where order_detail_id_pk = #{orderDetailNum}
			    )
		)
    </select>
    
    <select id="getDetailImgListByOrderDetailNum" parameterType="String" resultType="com.spring.gotgongbang.order.model.DetailImgVO">
        select detail_img_num_pk, order_num_fk, detail_img_name, detail_img_new_name
		from detail_img
		where order_num_fk = 
		(
			select order_num_fk
			from
			estimate
			where estimate_num_pk = 
			    (
			    select estimate_num_fk
			    from order_detail
			    where order_detail_id_pk = #{orderDetailNum}
			    )
		)
    </select>
    
    <select id="getFixedPhotoNum" resultType="int">
    	select seq_fixed_photo_num_pk.nextval as fixed_photo_num_pk from dual
    </select>
    
    <insert id="insertReview" parameterType="HashMap">
    	insert into REVIEW values(seq_review_id_pk.nextval, #{userId}, #{orderDetailNum}, #{reviewRating}, #{reviewContent}, sysdate, #{orderNum}, #{craftNum})
    </insert>
    
    <insert id="insertFixedPhoto" parameterType="HashMap">
    	insert into FIXED_PHOTO values(#{fixedPhotoNum}, #{reviewId}, #{fileName})
    </insert>
    
    <select id="getCurrReviewIdByOrderDetailNum" parameterType="String" resultType="int">
    	select review_id_pk
    	from REVIEW
    	where order_detail_id_fk = #{orderDetailNum}
    </select>
    
    <select id="getOrderNumAndCraftNumByOrderDetailNum" parameterType="String" resultMap="orderNumAndCraftNumMap">
    	select order_num_fk, craft_num_fk
		from 
		(
		select order_num_fk, estimate_num_pk, craft_num_fk
		from ESTIMATE
		) A
		join 
		(
		select estimate_num_fk
		from ORDER_DETAIL
		where order_detail_id_pk = #{orderDetailNum}
		) B
		on A.estimate_num_pk = B.estimate_num_fk
    </select>
    
    <delete id="deleteReviewByOrderNum" parameterType="String">
    	delete from REVIEW where order_detail_id_fk = #{orderNum}
    </delete>

    
    <!--==================== 박준엽 끝 ====================== -->
    
    
    
    <!--==================== 이지현 시작 ====================== -->
    <select id="delete_user_end" parameterType="HashMap" resultType="int">
    	select count(*)
		from member
		where user_id_pk=#{user_id_pk} and pwd =#{pwd}
    </select>

			 
	<update id="delete_user_info" parameterType="String">
    	update member
		set status=0 where user_id_pk = #{user_id_pk}
    </update>
    

    
    <!--==================== 이지현 끝 ====================== -->

</mapper>