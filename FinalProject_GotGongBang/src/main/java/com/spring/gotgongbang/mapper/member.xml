<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">
	<!--==================== 홍용훈 시작 ====================== -->
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="com.spring.gotgongbang.member.model.MemberVO">
		insert into MEMBER (user_id_pk, name, pwd, email, mobile, post_code, address, detail_address, extra_address, gender, birthday, mileage, registerday, last_pwd_change, idle, pwd_change_required, status)
		values(#{user_id_pk},#{name},#{pwd},#{email},#{mobile},#{post_code},#{address},#{detail_address},#{extra_address},#{gender},#{birthday},default,default,default,default,default,default)
	</insert>
	
	
	<!-- 이메일 중복 체크 -->
	<select id="isEmailDuplicate" resultType="int">
        SELECT COUNT(*) FROM MEMBER WHERE email = #{email}
    </select>
	
	
	<!-- 아이디 중복 체크 -->
	<select id="isIdDuplicate" resultType="int">
        SELECT COUNT(*) FROM MEMBER WHERE user_id_pk = #{user_id_pk}
    </select>
    

    
    <!-- 로그인 처리 -->
    <select id="getLoginMember" parameterType="HashMap" resultType="com.spring.gotgongbang.member.model.MemberVO">
    	select user_id_pk, name, email, mobile, post_code, address, detail_address, extra_address, gender,
		    birthday, mileage, registerday, idle,
		    pwdchangegap,
		    NVL(lastlogingap, trunc( months_between(sysdate, registerday) ) ) AS lastlogingap
		from 
		( 
		select user_id_pk, name, email, mobile, post_code, address, detail_address, extra_address, gender 
		     , birthday
		     , mileage, to_char(registerday, 'yy/mm/dd') AS registerday, idle
		     , trunc( months_between(sysdate, last_pwd_change) ) AS pwdchangegap 
		 from MEMBER 
		 where status = 1 and user_id_pk = #{userid} and pwd = #{pwd} 
		 ) M 
		 CROSS JOIN 
		 ( 
		 select trunc( months_between(sysdate, max(login_date)) ) AS lastlogingap 
		 from LOGIN_HISTORY 
		 where user_id_pk_pk = #{userid} 
		 ) H
    </select>
    
   <!--  MEMBER 테이블의 idle 컬럼의 값을 1로 변경  -->
    <update id="updateIdle" parameterType="String">
		update MEMBER set idle = 1
		where user_id_pk = #{userid}
	</update>
	
	<!-- 로그인 기록 -->
	<insert id="recordLoginDate" parameterType="HashMap">
        insert into LOGIN_HISTORY (user_id_pk_pk, login_date)
        values (#{userid}, #{loginDate})
    </insert>
    
    <!-- 이름과 이메일 값으로 아이디 유무 체크 및 ID 값 가져오기 -->
    <select id="compareNameEmail" parameterType="HashMap" resultType="com.spring.gotgongbang.member.model.MemberVO">
    	SELECT COALESCE(m.user_id_pk, p.partner_id_pk) AS user_id_pk
		FROM member m
		FULL OUTER JOIN partner p ON m.name = p.partner_name
		WHERE #{name} IN (m.name, p.partner_name) and #{email} IN (m.email, p.partner_email)
    </select>
    
    
    <select id="compareNameEmailMember" parameterType="HashMap" resultType="String">
    	SELECT user_id_pk
		FROM member
		WHERE name = #{name} and email = #{email}
    </select>
    
    
    <select id="compareNameEmailpartner" parameterType="HashMap" resultType="String">
    	SELECT partner_id_pk AS user_id_pk
		FROM partner
		WHERE partner_name = #{name} and partner_email = #{email}
    </select>
    
    
    
    <!--==================== 홍용훈 끝 ====================== -->
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    <!--==================== 박준엽 시작 ====================== -->
    <resultMap type="HashMap" id="getProposalListByUserIdMap">
    	<result column="order_num_pk" property="order_num_pk"/>
    	<result column="order_product_type" property="order_product_type"/>
    	<result column="brand_name" property="brand_name"/>
    	<result column="request_explain" property="request_explain"/>
    	<result column="requests" property="requests"/>
    	<result column="craft_num_fk" property="craft_num_fk"/>
    	<result column="craft_name" property="craft_name"/>
    	<result column="estimate_price" property="estimate_price"/>
    	<result column="estimate_period" property="estimate_period"/>
    	<result column="estimate_proposal_date" property="estimate_proposal_date"/>
    </resultMap>
    
    <select id="getProposalListByUserId" parameterType="HashMap" resultMap="getProposalListByUserIdMap">
    	select order_num_pk, order_product_type, brand_name, request_explain, requests, craft_num_fk, 
    	order_num_fk, craft_name, estimate_price, estimate_period, to_char(estimate_proposal_date, 'yyyy-mm-dd') as estimate_proposal_date
		from
		(
		    select row_number() over(order by estimate_proposal_date desc) as rno, order_num_pk, order_product_type, brand_name, request_explain, requests, craft_num_fk, 
		    order_num_fk, (select craft_name from CRAFT where craft_num_pk = B.craft_num_fk) as craft_name,
		    estimate_price, estimate_period, estimate_proposal_date
		    from
		    (
		    select order_num_pk, order_product_type, brand_name, request_explain, requests
		    from ORDERS
		    where user_id_fk = #{userId}
		    ) A
		    join
		    (
		    select craft_num_fk, order_num_fk, estimate_price, estimate_period, estimate_proposal_date
		    from ESTIMATE
		    ) B
		    on order_num_pk = order_num_fk
		) S
		where rno between #{startRno} and #{endRno}
    </select>
    
    <select id="getUserInfoByUserId" parameterType="String" resultType="com.spring.gotgongbang.member.model.MemberVO">
    	select  user_id_pk, pwd, name, email, mobile, post_code, address, detail_address, extra_address, to_char(birthday, 'YYYY-MM-DD') AS birthday
		from MEMBER
		where user_id_pk = #{userid}
    </select>
    
    <update id="updateMemberInfoByMVO" parameterType="com.spring.gotgongbang.member.model.MemberVO">
    	UPDATE MEMBER SET name = #{name}, email = #{email}, mobile = #{mobile}, post_code = #{post_code}, address = #{address},
		detail_address = #{detail_address}, extra_address = #{extra_address}, birthday = to_date(#{birthday}, 'YYYY-MM-DD')
		WHERE user_id_pk = #{user_id_pk}
    </update>
  
    <update id="updateMemberPwd" parameterType="com.spring.gotgongbang.member.model.MemberVO">
    	UPDATE MEMBER SET pwd = #{pwd}, last_pwd_change = sysdate
		WHERE user_id_pk = #{user_id_pk}
    </update>
    
    <!--==================== 박준엽 끝 ====================== -->

</mapper>